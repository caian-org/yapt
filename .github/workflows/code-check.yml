name: perform-code-checkings

on:
  pull_request:
    branches: '*'
    tags: '*'
    paths-ignore: '**.md'

jobs:
  docker-code-check:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: yapt:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: code-check-buildx-${{ github.sha }}
          restore-keys: |
            code-check-buildx-

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            ENV=dev

      - name: Check code style
        run: docker run --rm "$IMAGE_NAME" poetry run poe check:style

      - name: Check lint
        run: docker run --rm "$IMAGE_NAME" poetry run poe check:lint

      - name: Check types
        run: docker run --rm "$IMAGE_NAME" poetry run poe check:types

      - name: Check security issues
        run: docker run --rm "$IMAGE_NAME" poetry run poe check:security

      - name: Check for dead code
        run: docker run --rm "$IMAGE_NAME" poetry run poe check:deadcode

  host-code-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-ver: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup python ${{ matrix.py-ver }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py-ver }}

      - name: Install poetry
        uses: snok/install-poetry@v1.3.1
        with:
          version: 1.1.13
          virtualenvs-path: .venv
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        id: code-check-cache
        uses: actions/cache@v3
        with:
          path: ./app/.venv
          key: code-check-python-${{ matrix.py-ver }}-${{ hashFiles('./app/poetry.lock') }}

      - name: Install dependencies
        if: steps.code-check-cache.outputs.cache-hit != 'true'
        run: cd app && poetry install

      - name: Check code style
        run: make poe task=check:style

      - name: Check lint
        run: make poe task=check:lint

      - name: Check types
        run: make poe task=check:types

      - name: Check security issues
        run: make poe task=check:security

      - name: Check for dead code
        run: make poe task=check:deadcode
